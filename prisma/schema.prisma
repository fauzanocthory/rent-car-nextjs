datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String    @default("https://m7vwiihfc6hf4bbg.public.blob.vercel-storage.com/PROFILE-ntWbPF3t8umc0N0aMgHbc5J0nyWvVJ.jpg")
  role                String    @default("user")
  nomorHandphone      String?
  totalRiwayatBooking String?
  stnk                String    @default("https://m7vwiihfc6hf4bbg.public.blob.vercel-storage.com/STNK-aOUSUKEQlDGsstjDjkhKRyaxgOHrLG.png")
  sim                 String    @default("https://m7vwiihfc6hf4bbg.public.blob.vercel-storage.com/SIM-DVNDYnkJVD42uWQZekL3jT5dj8dpeG.jpg")
  accounts            Account[]
  sessions            Session[]
  mobils              Mobil[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Mobil {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  merk              String?
  type              String?
  warna             String?
  bahan_bakar       String?
  persneling        String?
  max_penumpang     String?
  air_conditioner   String?
  bluetooth         String?
  audio_jack        String?
  kapasitas_tangki  String?
  tenaga_kuda       String?
  kecepatan_cc      String?
  jumlah_pintu      String?
  fotoMobil         FotoMobil[]
  tarif             String?
  status_booking    String?     @default("Belum Bibooking")
  nomor_polisi      String?     @unique
  userId            String      @db.ObjectId
  Booking           Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mobils")
}

model FotoMobil {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  image   String?
  mobilId String  @db.ObjectId
  mobil   Mobil   @relation(fields: [mobilId], references: [id], onDelete: Cascade)
}

model Booking {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  mobilId String @db.ObjectId
  mobil   Mobil  @relation(fields: [mobilId], references: [id], onDelete: Cascade)
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tanggal_mulai_sewa Float?
  lama_hari Int
  tglSelesaiSewa Int
  status_pembayaran String?     @default("Belum Dibayar")
  status_pengembalian String?     @default("Belum Dikembalikan")
}
